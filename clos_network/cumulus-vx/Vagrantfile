# -*- mode: ruby -*-
# vi: set ft=ruby :

serverSettings = [
  #
  # pod01
  #
  {
    "box" => "ubuntu/jammy64",
    "box_version" => "20221004.0.0",
    "hostname" => "server01",
    "network" => {
      "name" => "nw1",
      "ip" => "10.0.102.2/24",
      "gateway" => "10.0.102.1"
    }
  },
  {
    "box" => "ubuntu/jammy64",
    "box_version" => "20221004.0.0",
    "hostname" => "server02",
    "network" => {
      "name" => "nw2",
      "ip" => "10.0.103.2/24",
      "gateway" => "10.0.103.1"
    }
  },
  #
  # pod02
  #
  {
    "box" => "ubuntu/jammy64",
    "box_version" => "20221004.0.0",
    "hostname" => "server03",
    "network" => {
      "name" => "nw3",
      "ip" => "10.0.104.2/24",
      "gateway" => "10.0.104.1"
    }
  },
  {
    "box" => "ubuntu/jammy64",
    "box_version" => "20221004.0.0",
    "hostname" => "server04",
    "network" => {
      "name" => "nw4",
      "ip" => "10.0.105.2/24",
      "gateway" => "10.0.105.1"
    }
  }
]

switchSettings = [
  #
  # pod01
  #
  {
    "box" => "CumulusCommunity/cumulus-vx",
    "box_version" => "4.3.1", # Could not boot 4.5.0 and 4.4.4 because of "Kernel panic - not syncing" error.
                              # Could not boot 4.4.0 because of "VBoxManage.exe: error: Appliance read failed" error.
    "hostname" => "leaf01",
    "network" => [
      {
        "interface" => "lo",
        "ip" => "10.0.101.1/32"
      },
      {
        "name" => "nw5",      # leaf01 <--> spine01
        "interface" => "swp1"
      },
      {
        "name" => "nw6",      # leaf01 <--> spine02
        "interface" => "swp2"
      },
      {
        "name" => "nw1",      # leaf01 <--> server01
        "interface" => "swp3",
      },
      {
        "interface" => "vlan1",
        "bridge-ports" => "swp3",
        "ip" => "10.0.102.1/24",
      },
    ],
  },
  {
    "box" => "CumulusCommunity/cumulus-vx",
    "box_version" => "4.3.1", # Could not boot 4.5.0 and 4.4.4 because of "Kernel panic - not syncing" error.
                              # Could not boot 4.4.0 because of "VBoxManage.exe: error: Appliance read failed" error.
    "hostname" => "leaf02",
    "network" => [
      {
        "interface" => "lo",
        "ip" => "10.0.101.2/32"
      },
      {
        "name" => "nw7",      # leaf02 <--> spine01
        "interface" => "swp1"
      },
      {
        "name" => "nw8",      # leaf02 <--> spine02
        "interface" => "swp2"
      },
      {
        "name" => "nw2",      # leaf02 <--> server02
        "interface" => "swp3",
      },
      {
        "interface" => "vlan2",
        "bridge-ports" => "swp3",
        "ip" => "10.0.103.1/24"
      },
    ],
  },
  {
    "box" => "CumulusCommunity/cumulus-vx",
    "box_version" => "4.3.1", # Could not boot 4.5.0 and 4.4.4 because of "Kernel panic - not syncing" error.
                              # Could not boot 4.4.0 because of "VBoxManage.exe: error: Appliance read failed" error.
    "hostname" => "spine01",
    "network" => [
      {
        "interface" => "lo",
        "ip" => "10.0.101.3/32"
      },
      {
        "name" => "nw9",      # spine01 <--> super spine01
        "interface" => "swp1"
      },
      {
        "name" => "nw10",     # spine01 <--> super spine02
        "interface" => "swp2"
      },
      {
        "name" => "nw5",      # spine01 <--> leaf01
        "interface" => "swp3",
      },
      {
        "name" => "nw7",      # spine01 <--> leaf02
        "interface" => "swp4",
      },
    ],
  },
  {
    "box" => "CumulusCommunity/cumulus-vx",
    "box_version" => "4.3.1", # Could not boot 4.5.0 and 4.4.4 because of "Kernel panic - not syncing" error.
                              # Could not boot 4.4.0 because of "VBoxManage.exe: error: Appliance read failed" error.
    "hostname" => "spine02",
    "network" => [
      {
        "interface" => "lo",
        "ip" => "10.0.101.4/32"
      },
      {
        "name" => "nw11",     # spine02 <--> super spine03
        "interface" => "swp1"
      },
      {
        "name" => "nw12",     # spine02 <--> super spine04
        "interface" => "swp2"
      },
      {
        "name" => "nw6",      # spine02 <--> leaf01
        "interface" => "swp3",
      },
      {
        "name" => "nw8",      # spine02 <--> leaf02
        "interface" => "swp4",
      },
    ],
  },
  #
  # pod02
  #
  {
    "box" => "CumulusCommunity/cumulus-vx",
    "box_version" => "4.3.1", # Could not boot 4.5.0 and 4.4.4 because of "Kernel panic - not syncing" error.
                              # Could not boot 4.4.0 because of "VBoxManage.exe: error: Appliance read failed" error.
    "hostname" => "leaf03",
    "network" => [
      {
        "interface" => "lo",
        "ip" => "10.0.101.5/32"
      },
      {
        "name" => "nw13",     # leaf03 <--> spine03
        "interface" => "swp1"
      },
      {
        "name" => "nw14",     # leaf03 <--> spine04
        "interface" => "swp2"
      },
      {
        "name" => "nw3",      # leaf03 <--> server03
        "interface" => "swp3",
      },
      {
        "interface" => "vlan3",
        "bridge-ports" => "swp3",
        "ip" => "10.0.104.1/24",
      },
    ],
  },
  {
    "box" => "CumulusCommunity/cumulus-vx",
    "box_version" => "4.3.1", # Could not boot 4.5.0 and 4.4.4 because of "Kernel panic - not syncing" error.
                              # Could not boot 4.4.0 because of "VBoxManage.exe: error: Appliance read failed" error.
    "hostname" => "leaf04",
    "network" => [
      {
        "interface" => "lo",
        "ip" => "10.0.101.6/32"
      },
      {
        "name" => "nw15",     # leaf04 <--> spine03
        "interface" => "swp1"
      },
      {
        "name" => "nw16",     # leaf04 <--> spine04
        "interface" => "swp2"
      },
      {
        "name" => "nw4",      # leaf04 <--> server04
        "interface" => "swp3",
      },
      {
        "interface" => "vlan4",
        "bridge-ports" => "swp3",
        "ip" => "10.0.105.1/24",
      },
    ],
  },
  {
    "box" => "CumulusCommunity/cumulus-vx",
    "box_version" => "4.3.1", # Could not boot 4.5.0 and 4.4.4 because of "Kernel panic - not syncing" error.
                              # Could not boot 4.4.0 because of "VBoxManage.exe: error: Appliance read failed" error.
    "hostname" => "spine03",
    "network" => [
      {
        "interface" => "lo",
        "ip" => "10.0.101.7/32"
      },
      {
        "name" => "nw17",     # spine03 <--> super spine01
        "interface" => "swp1"
      },
      {
        "name" => "nw18",     # spine03 <--> super spine02
        "interface" => "swp2"
      },
      {
        "name" => "nw13",     # spine03 <--> leaf03
        "interface" => "swp3",
      },
      {
        "name" => "nw15",     # spine03 <--> leaf04
        "interface" => "swp4",
      },
    ],
  },
  {
    "box" => "CumulusCommunity/cumulus-vx",
    "box_version" => "4.3.1", # Could not boot 4.5.0 and 4.4.4 because of "Kernel panic - not syncing" error.
                              # Could not boot 4.4.0 because of "VBoxManage.exe: error: Appliance read failed" error.
    "hostname" => "spine04",
    "network" => [
      {
        "interface" => "lo",
        "ip" => "10.0.101.8/32"
      },
      {
        "name" => "nw19",     # spine04 <--> super spine03
        "interface" => "swp1"
      },
      {
        "name" => "nw20",     # spine04 <--> super spine04
        "interface" => "swp2"
      },
      {
        "name" => "nw14",     # spine04 <--> leaf03
        "interface" => "swp3",
      },
      {
        "name" => "nw16",     # spine04 <--> leaf04
        "interface" => "swp4",
      },
    ],
  },
  #
  # super spine group01
  #
  {
    "box" => "CumulusCommunity/cumulus-vx",
    "box_version" => "4.3.1", # Could not boot 4.5.0 and 4.4.4 because of "Kernel panic - not syncing" error.
                              # Could not boot 4.4.0 because of "VBoxManage.exe: error: Appliance read failed" error.
    "hostname" => "super-spine01",
    "network" => [
      {
        "interface" => "lo",
        "ip" => "10.0.101.9/32"
      },
      {
        "name" => "nw9",     # super spine01 <--> spine01
        "interface" => "swp1"
      },
      {
        "name" => "nw17",    # super spine01 <--> spine03
        "interface" => "swp2"
      },
    ],
  },
  {
    "box" => "CumulusCommunity/cumulus-vx",
    "box_version" => "4.3.1", # Could not boot 4.5.0 and 4.4.4 because of "Kernel panic - not syncing" error.
                              # Could not boot 4.4.0 because of "VBoxManage.exe: error: Appliance read failed" error.
    "hostname" => "super-spine02",
    "network" => [
      {
        "interface" => "lo",
        "ip" => "10.0.101.10/32"
      },
      {
        "name" => "nw10",    # super spine02 <--> spine01
        "interface" => "swp1"
      },
      {
        "name" => "nw18",    # super spine02 <--> spine03
        "interface" => "swp2"
      },
    ],
  },
  #
  # super spine group02
  #
  {
    "box" => "CumulusCommunity/cumulus-vx",
    "box_version" => "4.3.1", # Could not boot 4.5.0 and 4.4.4 because of "Kernel panic - not syncing" error.
                              # Could not boot 4.4.0 because of "VBoxManage.exe: error: Appliance read failed" error.
    "hostname" => "super-spine03",
    "network" => [
      {
        "interface" => "lo",
        "ip" => "10.0.101.11/32"
      },
      {
        "name" => "nw11",     # super spine03 <--> spine02
        "interface" => "swp1"
      },
      {
        "name" => "nw19",     # super spine03 <--> spine04
        "interface" => "swp2"
      },
    ],
  },
  {
    "box" => "CumulusCommunity/cumulus-vx",
    "box_version" => "4.3.1", # Could not boot 4.5.0 and 4.4.4 because of "Kernel panic - not syncing" error.
                              # Could not boot 4.4.0 because of "VBoxManage.exe: error: Appliance read failed" error.
    "hostname" => "super-spine04",
    "network" => [
      {
        "interface" => "lo",
        "ip" => "10.0.101.12/32"
      },
      {
        "name" => "nw12",    # super spine04 <--> spine02
        "interface" => "swp1"
      },
      {
        "name" => "nw20",    # super spine04 <--> spine02
        "interface" => "swp2"
      },
    ],
  },
]

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.
  config.vm.provider "virtualbox" do |vb|
    vb.memory = 2048 # Allocated only 1024 mb made operation too slow.
    vb.cpus = 2      # Allocating only 1 cpu cause "Kernel panic - not syncing" error when booting vm.
  end

  switchSettings.each do |switchSetting|
    config.vm.define switchSetting["hostname"] do |device|
      # Every Vagrant development environment requires a box. You can search for
      # boxes at https://vagrantcloud.com/search.
      device.vm.box = switchSetting["box"]
      device.vm.box_version = switchSetting["box_version"]
      device.vm.hostname = switchSetting["hostname"]

      # Disable automatic box update checking. If you disable this, then
      # boxes will only be checked for updates when the user runs
      # `vagrant box outdated`. This is not recommended.
      # config.vm.box_check_update = false
      device.vm.box_check_update = false

      switchSetting["network"].each do |networkSetting|
        if networkSetting["name"] == nil
          next
        end
        # Create a private network, which allows host-only access to the machine
        # using a specific IP.
        # config.vm.network "private_network", ip: "192.168.33.10"
        device.vm.network "private_network", virtualbox__intnet: networkSetting["name"], auto_config: false
      end

      device.vm.provision "file",
        source: "conf/#{switchSetting["hostname"]}/etc/frr/daemons",
        destination: "/tmp/daemons"

      device.vm.provision "file",
        source: "conf/#{switchSetting["hostname"]}/etc/frr/frr.conf",
        destination: "/tmp/frr.conf"

      # Enable provisioning with a shell script. Additional provisioners such as
      # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
      # documentation for more information about their specific syntax and use.
      # config.vm.provision "shell", inline: <<-SHELL
      #   apt-get update
      #   apt-get install -y apache2
      # SHELL
      device.vm.provision "shell", inline: <<-SHELL
        sudo cp /tmp/daemons /etc/frr/daemons
        sudo cp /tmp/frr.conf /etc/frr/frr.conf
        sudo systemctl restart frr.service
      SHELL

      device.vm.provision "shell" do |shell|
        cmd = ""
        switchSetting["network"].each do |networkSetting|
          if networkSetting["bridge-ports"] != nil && networkSetting["bridge-ports"] != ""
            # vlan
            cmd += "sudo tee -a /etc/network/interfaces << EOF\n"
            cmd += "\n"
            cmd += "auto #{networkSetting["interface"]}\n"
            cmd += "iface #{networkSetting["interface"]}\n"
            if networkSetting["ip"] != nil && networkSetting["ip"] != ""
              cmd += "    address #{networkSetting["ip"]}\n"
            end
            cmd += "    bridge-ports #{networkSetting["bridge-ports"]}\n"
            cmd += "    bridge-vlan-aware no\n"
            cmd += "    bridge-stp no\n"
            cmd += "EOF\n"
            cmd += "sudo ifreload -a\n"
          elsif networkSetting["interface"] == "lo"
            # lo
            cmd += "sudo net add loopback #{networkSetting["interface"]}"
            if networkSetting["ip"] != nil && networkSetting["ip"] != ""
              cmd += " ip address #{networkSetting["ip"]}"
            end
            cmd += "\n"
            cmd += "sudo net commit\n"
          else
            # other
            cmd += "sudo net add interface #{networkSetting["interface"]}"
            if networkSetting["ip"] != nil && networkSetting["ip"] != ""
              cmd += " ip address #{networkSetting["ip"]}"
            end
            cmd += "\n"
            cmd += "sudo net commit\n"
          end
        end
        shell.inline = cmd
      end

      device.vm.provision "shell" do |shell|
        cmd = ""
        switchSetting["network"].each do |networkSetting|
          if networkSetting["interface"] == nil || networkSetting["interface"] ==""
            next
          end
          cmd += "sudo ip link set up #{networkSetting["interface"]}\n"
        end
        shell.inline = cmd
      end
    end
  end

  serverSettings.each do |serverSetting|
    config.vm.define serverSetting["hostname"] do |device|
      # Every Vagrant development environment requires a box. You can search for
      # boxes at https://vagrantcloud.com/search.
      device.vm.box = serverSetting["box"]
      device.vm.box_version = serverSetting["box_version"]
      device.vm.hostname = serverSetting["hostname"]

      # Disable automatic box update checking. If you disable this, then
      # boxes will only be checked for updates when the user runs
      # `vagrant box outdated`. This is not recommended.
      # config.vm.box_check_update = false
      device.vm.box_check_update = false

      # Create a private network, which allows host-only access to the machine
      # using a specific IP.
      # config.vm.network "private_network", ip: "192.168.33.10"
      device.vm.network "private_network", virtualbox__intnet: serverSetting["network"]["name"], auto_config: false 

      # Enable provisioning with a shell script. Additional provisioners such as
      # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
      # documentation for more information about their specific syntax and use.
      # config.vm.provision "shell", inline: <<-SHELL
      #   apt-get update
      #   apt-get install -y apache2
      # SHELL
      device.vm.provision "shell" do |shell|
        cmd = ""
        cmd += "sudo tee /etc/netplan/51-cloud-init.yaml << EOF\n"
        cmd += "network:\n"
        cmd += "  ethernets:\n"
        cmd += "    enp0s8:\n"
        cmd += "      dhcp4: false\n"
        cmd += "      dhcp6: false\n"
        cmd += "      addresses: [#{serverSetting["network"]["ip"]}]\n"
        cmd += "      routes:\n"
        cmd += "        - to: default\n"
        cmd += "          via: #{serverSetting["network"]["gateway"]}\n"
        cmd += "  version: 2\n"
        cmd += "EOF\n"

        cmd += "sudo netplan apply\n"

        shell.inline = cmd
      end
    end
  end
end
